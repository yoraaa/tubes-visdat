{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "from bokeh.plotting import figure\n",
    "from bokeh.io import show, output_notebook, push_notebook, curdoc\n",
    "\n",
    "from bokeh.models import Quad, ColumnDataSource, HoverTool, CategoricalColorMapper, Panel, CustomJS, Dropdown, Select\n",
    "from bokeh.models.widgets import CheckboxGroup, Slider, RangeSlider, Tabs\n",
    "\n",
    "from bokeh.layouts import column, row, WidgetBox\n",
    "from bokeh.palettes import Category20_16, Spectral4\n",
    "\n",
    "from bokeh.application.handlers import FunctionHandler\n",
    "from bokeh.application import Application"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "from bokeh.io import output_notebook, show\n",
    "\n",
    "from bokeh.plotting import figure \n",
    "\n",
    "from bokeh.models import CustomJS, ColumnDataSource, Panel, Tabs, DatetimeTickFormatter, HoverTool, NumeralTickFormatter\n",
    "from bokeh.models.widgets import Select, DateRangeSlider\n",
    "\n",
    "from bokeh.application import Application\n",
    "from bokeh.application.handlers import FunctionHandler\n",
    "\n",
    "from bokeh.layouts import column, row"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv(\"Indonesia_coronavirus_daily_data.csv\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Province</th>\n",
       "      <th>Daily_Case</th>\n",
       "      <th>Daily_Death</th>\n",
       "      <th>Daily_Recovered</th>\n",
       "      <th>Active_Case</th>\n",
       "      <th>Cumulative_Case</th>\n",
       "      <th>Cumulative_Recovered</th>\n",
       "      <th>Cumulative_Death</th>\n",
       "      <th>Cumulative_Active_Case</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-03-01</td>\n",
       "      <td>DKI JAKARTA</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-03-02</td>\n",
       "      <td>DKI JAKARTA</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-03-03</td>\n",
       "      <td>DKI JAKARTA</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-03-04</td>\n",
       "      <td>DKI JAKARTA</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-03-05</td>\n",
       "      <td>DKI JAKARTA</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17608</th>\n",
       "      <td>2021-08-14</td>\n",
       "      <td>NUSA TENGGARA TIMUR</td>\n",
       "      <td>649</td>\n",
       "      <td>21</td>\n",
       "      <td>892</td>\n",
       "      <td>-264</td>\n",
       "      <td>52686</td>\n",
       "      <td>42250</td>\n",
       "      <td>1016</td>\n",
       "      <td>9420</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17609</th>\n",
       "      <td>2021-08-15</td>\n",
       "      <td>NUSA TENGGARA TIMUR</td>\n",
       "      <td>498</td>\n",
       "      <td>7</td>\n",
       "      <td>1421</td>\n",
       "      <td>-930</td>\n",
       "      <td>53184</td>\n",
       "      <td>43671</td>\n",
       "      <td>1023</td>\n",
       "      <td>8490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17610</th>\n",
       "      <td>2021-08-16</td>\n",
       "      <td>NUSA TENGGARA TIMUR</td>\n",
       "      <td>438</td>\n",
       "      <td>18</td>\n",
       "      <td>969</td>\n",
       "      <td>-549</td>\n",
       "      <td>53622</td>\n",
       "      <td>44640</td>\n",
       "      <td>1041</td>\n",
       "      <td>7941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17611</th>\n",
       "      <td>2021-08-17</td>\n",
       "      <td>NUSA TENGGARA TIMUR</td>\n",
       "      <td>657</td>\n",
       "      <td>15</td>\n",
       "      <td>633</td>\n",
       "      <td>9</td>\n",
       "      <td>54279</td>\n",
       "      <td>45273</td>\n",
       "      <td>1056</td>\n",
       "      <td>7950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17612</th>\n",
       "      <td>2021-08-18</td>\n",
       "      <td>NUSA TENGGARA TIMUR</td>\n",
       "      <td>527</td>\n",
       "      <td>8</td>\n",
       "      <td>949</td>\n",
       "      <td>-430</td>\n",
       "      <td>54806</td>\n",
       "      <td>46222</td>\n",
       "      <td>1064</td>\n",
       "      <td>7520</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>17613 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Date             Province  Daily_Case  Daily_Death  \\\n",
       "0      2020-03-01          DKI JAKARTA           2            0   \n",
       "1      2020-03-02          DKI JAKARTA           2            0   \n",
       "2      2020-03-03          DKI JAKARTA           2            0   \n",
       "3      2020-03-04          DKI JAKARTA           2            0   \n",
       "4      2020-03-05          DKI JAKARTA           0            1   \n",
       "...           ...                  ...         ...          ...   \n",
       "17608  2021-08-14  NUSA TENGGARA TIMUR         649           21   \n",
       "17609  2021-08-15  NUSA TENGGARA TIMUR         498            7   \n",
       "17610  2021-08-16  NUSA TENGGARA TIMUR         438           18   \n",
       "17611  2021-08-17  NUSA TENGGARA TIMUR         657           15   \n",
       "17612  2021-08-18  NUSA TENGGARA TIMUR         527            8   \n",
       "\n",
       "       Daily_Recovered  Active_Case  Cumulative_Case  Cumulative_Recovered  \\\n",
       "0                    0            2                2                     0   \n",
       "1                    0            2                4                     0   \n",
       "2                    0            2                6                     0   \n",
       "3                    0            2                8                     0   \n",
       "4                    0           -1                8                     0   \n",
       "...                ...          ...              ...                   ...   \n",
       "17608              892         -264            52686                 42250   \n",
       "17609             1421         -930            53184                 43671   \n",
       "17610              969         -549            53622                 44640   \n",
       "17611              633            9            54279                 45273   \n",
       "17612              949         -430            54806                 46222   \n",
       "\n",
       "       Cumulative_Death  Cumulative_Active_Case  \n",
       "0                     0                       2  \n",
       "1                     0                       4  \n",
       "2                     0                       6  \n",
       "3                     0                       8  \n",
       "4                     1                       7  \n",
       "...                 ...                     ...  \n",
       "17608              1016                    9420  \n",
       "17609              1023                    8490  \n",
       "17610              1041                    7941  \n",
       "17611              1056                    7950  \n",
       "17612              1064                    7520  \n",
       "\n",
       "[17613 rows x 10 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "prov = list(data.Province.unique())\n",
    "\n",
    "DataList = list(data.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def newData(dt, feature):\n",
    "\n",
    "    \n",
    "    xs = []\n",
    "    ys = []\n",
    "    colors = []\n",
    "    labels = []\n",
    "\n",
    "    for i, prov in enumerate(dt):\n",
    "\n",
    "        dat = data[data['Province'] == prov].reset_index(drop = True)\n",
    "        \n",
    "        x = list(dat['Daily_Case'])\n",
    "        y = list(dat[feature])\n",
    "        \n",
    "        xs.append(list(x))\n",
    "        ys.append(list(y))\n",
    "\n",
    "        colors.append(Category20_16[i])\n",
    "        labels.append(prov)\n",
    "\n",
    "    new_src = ColumnDataSource(data={'x': xs, 'y': ys, 'color': colors, 'label': labels})\n",
    "\n",
    "    return new_src"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Functiuon to make the plot from the data obtained/updated at each selection in the ColumnDataSource\n",
    "def plotGraf(src, feature):\n",
    "    \n",
    "    plot = figure(plot_width = 700, plot_height = 400, \n",
    "            title = 'Death by Cumulative Case',\n",
    "            x_axis_label = 'Kasus Kumulative', y_axis_label = 'Jumlah Kematian')\n",
    "\n",
    "    plot.multi_line('x', 'y', color = 'color', legend_field = 'label', line_width = 2, source = src)\n",
    "\n",
    "    return plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def provinceUpdate(prv, dtLama, dtBaru):\n",
    "    \n",
    "    plot = [chbx.labels[i] for i in chbx.active]   \n",
    "    new_src = newData(plot, fitur.value)\n",
    "    src.data.update(new_src.data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fiturUpdate(ftr, dtLama, dtBaru):\n",
    "    \n",
    "    plot = [chbx.labels[i] for i in chbx.active]    \n",
    "    feature = fitur.value   \n",
    "    new_src = newData(plot, feature)\n",
    "    src.data.update(new_src.data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "BokehDeprecationWarning: 'WidgetBox' is deprecated and will be removed in Bokeh 3.0, use 'bokeh.models.Column' instead\n"
     ]
    }
   ],
   "source": [
    "\n",
    "chbx = CheckboxGroup(labels=prov, active = [0])\n",
    "chbx.on_change('active', provinceUpdate)\n",
    "\n",
    "\n",
    "#Drop down \n",
    "fitur = Select(options = DataList[2:], value = 'Daily_Case', title = 'Pilih Fitur')\n",
    "fitur.on_change('value', fiturUpdate)\n",
    "\n",
    "#Default province\n",
    "province = [chbx.labels[i] for i in chbx.active]\n",
    "\n",
    "#Make default ColumnDataSource instance\n",
    "src = newData(province, fitur.value)\n",
    "\n",
    "#Plot  data\n",
    "p = plotGraf(src, fitur.value)\n",
    "\n",
    "# Put controls in a single element\n",
    "controls = WidgetBox(fitur, chbx)\n",
    "\n",
    "# Create a row layout\n",
    "layout = row(controls, p)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tab_barplot(data):\n",
    "    \n",
    "    source = ColumnDataSource(data)\n",
    "    p = figure(y_range=data['Province'], \n",
    "               title=\"Jumlah Kasus Tiap Provinsi\",\n",
    "               plot_height=800,\n",
    "               plot_width=800,\n",
    "               toolbar_location=None)\n",
    "\n",
    "    p.hbar(y='Province', right='Cumulative_Case', source=source, height=1)\n",
    "\n",
    "    p.x_range.start = 0\n",
    "    p.xaxis.formatter = NumeralTickFormatter(format=\"0\")\n",
    "    \n",
    "    return Panel(child=p, title=\"BAR PLOT\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_province = data.groupby(['Province']).sum()\n",
    "df_province = df_province.reset_index()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_daily_total = data.groupby(['Date']).sum()\n",
    "df_daily_total = df_daily_total.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tab_lineplot(data):\n",
    "    \n",
    "    source = ColumnDataSource(data)\n",
    "    \n",
    "    hover = HoverTool(\n",
    "        tooltips=[('Timestamp', '@x{%Y-%m-%d}'), ('Value', '@y')],\n",
    "        formatters={'x': 'datetime'},)\n",
    "\n",
    "    date_range_slider = DateRangeSlider(title=\"Rentang Tanggal\", \n",
    "                                        start=data['Date'].min(), \n",
    "                                        end=data['Date'].max(),\n",
    "                                        value=(data['Date'].min(), data['Date'].max()), \n",
    "                                        step=1, \n",
    "                                        width=300)\n",
    "\n",
    "    p = figure(x_range=df_daily_total['Date'],\n",
    "               x_axis_type='datetime',\n",
    "               x_axis_label='Date',\n",
    "               y_axis_label='Jumlah Kasus',\n",
    "               plot_height=500,\n",
    "               plot_width=750,\n",
    "               title='Jumlah Kasus COVID-19')\n",
    "    \n",
    "    p.line('Date', 'Cumulative_Case', source=source)\n",
    "    p.add_tools(hover)\n",
    "    p.xaxis.formatter = DatetimeTickFormatter(days = ['%F']) \n",
    "    \n",
    "    callback = CustomJS(args=dict(source=source, ref_source=source), code=\"\"\"   \n",
    "        console.log(cb_obj.value); \n",
    "        const date_from = Date.parse(new Date(cb_obj.value[0]).toDateString());\n",
    "        const date_to = Date.parse(new Date(cb_obj.value[1]).toDateString());\n",
    "\n",
    "        const data = source.data;\n",
    "        const ref = ref_source.data;\n",
    "\n",
    "        const from_pos = ref[\"x\"].indexOf(date_from);\n",
    "        const to_pos = ref[\"x\"].indexOf(date_to);\n",
    "\n",
    "        data[\"y\"] = ref[\"y\"].slice(from_pos, to_pos);\n",
    "        data[\"x\"] = ref[\"x\"].slice(from_pos, to_pos);\n",
    "\n",
    "        source.change.emit();\n",
    "    \"\"\")\n",
    "    \n",
    "    date_range_slider.js_on_change('value', callback)\n",
    "    \n",
    "    layout = column(date_range_slider, p)\n",
    "    \n",
    "    lineplot = Panel(child=layout, title=\"LINE PLOT\")\n",
    "    \n",
    "    return lineplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "bar = tab_barplot(df_province)\n",
    "line = tab_lineplot(df_daily_total)\n",
    "first_panel = Panel(child=layout, title='Death by Cumulative Case ')\n",
    "tabs = Tabs(tabs=[line,first_panel,bar])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:bokeh.embed.util:\n",
      "You are generating standalone HTML/JS output, but trying to use real Python\n",
      "callbacks (i.e. with on_change or on_event). This combination cannot work.\n",
      "\n",
      "Only JavaScript callbacks may be used with standalone output. For more\n",
      "information on JavaScript callbacks with Bokeh, see:\n",
      "\n",
      "    https://docs.bokeh.org/en/latest/docs/user_guide/interaction/callbacks.html\n",
      "\n",
      "Alternatively, to use real Python callbacks, a Bokeh server application may\n",
      "be used. For more information on building and running Bokeh applications, see:\n",
      "\n",
      "    https://docs.bokeh.org/en/latest/docs/user_guide/server.html\n",
      "\n"
     ]
    }
   ],
   "source": [
    "show(tabs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "ename": "RuntimeError",
     "evalue": "Models must be owned by only a single document, AdaptiveTicker(id='1166', ...) is already in a doc",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-27-c457e6f542ca>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mcurdoc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0madd_root\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtabs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\bokeh\\document\\document.py\u001b[0m in \u001b[0;36madd_root\u001b[1;34m(self, model, setter)\u001b[0m\n\u001b[0;32m    318\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_roots\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    319\u001b[0m         \u001b[1;32mfinally\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 320\u001b[1;33m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_pop_all_models_freeze\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    321\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_trigger_on_change\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mRootAddedEvent\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmodel\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0msetter\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    322\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\bokeh\\document\\document.py\u001b[0m in \u001b[0;36m_pop_all_models_freeze\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   1073\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_all_models_freeze_count\u001b[0m \u001b[1;33m-=\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1074\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_all_models_freeze_count\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1075\u001b[1;33m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_recompute_all_models\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1076\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1077\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_recompute_all_models\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\bokeh\\document\\document.py\u001b[0m in \u001b[0;36m_recompute_all_models\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   1096\u001b[0m             \u001b[0md\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_detach_document\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1097\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mto_attach\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1098\u001b[1;33m             \u001b[0ma\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_attach_document\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1099\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_all_models\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mrecomputed\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1100\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_all_models_by_name\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mrecomputed_by_name\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\bokeh\\model.py\u001b[0m in \u001b[0;36m_attach_document\u001b[1;34m(self, doc)\u001b[0m\n\u001b[0;32m    672\u001b[0m         '''\n\u001b[0;32m    673\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_document\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m \u001b[1;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_document\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mdoc\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 674\u001b[1;33m             \u001b[1;32mraise\u001b[0m \u001b[0mRuntimeError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Models must be owned by only a single document, %r is already in a doc\"\u001b[0m \u001b[1;33m%\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    675\u001b[0m         \u001b[0mdoc\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtheme\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply_to_model\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    676\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_document\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdoc\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mRuntimeError\u001b[0m: Models must be owned by only a single document, AdaptiveTicker(id='1166', ...) is already in a doc"
     ]
    }
   ],
   "source": [
    "curdoc().add_root(tabs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
